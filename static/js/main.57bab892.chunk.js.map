{"version":3,"sources":["components/sign-in/sign-in.component.jsx","components/map-box/mapbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","onChange","e","setState","target","name","value","SubmitForm","preventDefault","state","username","password","localStorage","setItem","loggedIn","this","to","style","position","onSubmit","className","id","htmlFor","type","Component","MapBox","console","log","useState","width","height","latitude","longitude","zoom","viewport","setViewport","selectPark","setSelectedPark","mapboxApiAccessToken","mapStyle","onViewportChange","parkData","map","park","key","properties","PARK_ID","geometry","coordinates","onClick","src","alt","onClose","textAlign","NAME","DESCRIPTIO","url","CAMERA_URL","autoplay","controls","App","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57bab892.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default class SignIn extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        let loggedIn = false;\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            loggedIn\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    SubmitForm = (e) => {\r\n        e.preventDefault()\r\n        const { username, password } = this.state;\r\n\r\n        // login authentication\r\n\r\n        localStorage.setItem('token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw')\r\n\r\n        if (username === 'username' && password === 'password') {\r\n            this.setState({\r\n                loggedIn: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.loggedIn) {\r\n            return <Redirect to='/map' />\r\n        } else {\r\n            return (\r\n                <form style={{ position: 'relative' }} onSubmit={this.SubmitForm}>\r\n                    <div className=\"App\">\r\n                        <article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5  center\" >\r\n                            <main className=\"pa4 white-80\">\r\n                                <div className='measure'>\r\n                                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                                        <legend className=\"f2 fw6 ph0 mh0\">Authentication</legend>\r\n                                        <div className=\"mv3\">\r\n                                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"text\">Username</label>\r\n                                            <input\r\n                                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                                type=\"text\"\r\n                                                value={this.state.username}\r\n                                                name=\"username\"\r\n                                                id=\"username\"\r\n                                                onChange={this.onChange}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"mv3\">\r\n                                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                                            <input\r\n                                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                                                value={this.state.password}\r\n                                                type=\"password\"\r\n                                                name=\"password\"\r\n                                                id=\"password\"\r\n                                                onChange={this.onChange}\r\n                                            />\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    <div>\r\n                                        <input\r\n                                            // onClick={this.onSubmitSignIn}\r\n                                            className=\"b ph3 pv2 input-reset ba b--white  grow pointer f6 dib\"\r\n                                            type=\"submit\"\r\n                                            value=\"Авторизоваться\" />\r\n                                    </div>\r\n                                </div>\r\n                            </main>\r\n                        </article>\r\n                    </div>\r\n                </form>\r\n            )\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport ReactMapGl, { Marker, Popup } from 'react-map-gl';\r\nimport * as parkData from '../../data.json';\r\nimport './mapbox.styles.css';\r\n\r\n\r\n\r\nimport ReactHlsPlayer from 'react-hls-player';\r\n\r\n\r\n\r\nconst MapBox = (props) => {\r\n\r\n    console.log(props);\r\n    const [viewport, setViewport] = useState({\r\n        width: '100vw',\r\n        height: '100vh',\r\n        latitude: 45.4211,\r\n        longitude: -75.6903,\r\n        zoom: 10\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [selectPark, setSelectedPark] = useState(null)\r\n\r\n    let token = 'pk.eyJ1IjoiZXZnZW55cXdlIiwiYSI6ImNrZzByOXN3ZTB5aTIycnFmeHFxMHplMHgifQ.uO59eh5EzNq3QgdSggQ3YA'\r\n\r\n    return (\r\n        <div className='mapbox-inner'>\r\n            <ReactMapGl\r\n                {...viewport}\r\n                mapboxApiAccessToken={token}\r\n                mapStyle='mapbox://styles/evgenyqwe/ckg0sbl952cri1alpf9g9hq54'\r\n                onViewportChange={viewport => {\r\n                    setViewport(viewport)\r\n                }}>\r\n                {\r\n                    parkData.features.map((park) => (\r\n                        <Marker\r\n                            key={park.properties.PARK_ID}\r\n                            latitude={park.geometry.coordinates[1]}\r\n                            longitude={park.geometry.coordinates[0]}\r\n                        >\r\n                            <button\r\n                                className='marker-btn'\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    setSelectedPark(park)\r\n                                }} >\r\n                                <img src='/skateboarding.svg' alt=\"Skate Park Icon\" />\r\n                            </button>\r\n                        </Marker>\r\n                    ))\r\n                }\r\n\r\n                {selectPark ? (\r\n                    <Popup\r\n                        latitude={selectPark.geometry.coordinates[1]}\r\n                        longitude={selectPark.geometry.coordinates[0]}\r\n                        onClose={() => {\r\n                            setSelectedPark(null)\r\n                        }}\r\n                    >\r\n                        <div style={{ width: '300px', height: '300px', textAlign: 'center' }}>\r\n                            <h2 style={{ textAlign: 'center' }}>{selectPark.properties.NAME}</h2>\r\n                            <p >{selectPark.properties.DESCRIPTIO}</p>\r\n\r\n                            <div>\r\n                                {<ReactHlsPlayer\r\n                                    url={selectPark.properties.CAMERA_URL}\r\n                                    autoplay={true}\r\n                                    controls={false}\r\n                                    width={300}\r\n                                    height={130}\r\n                                />}\r\n                            </div>\r\n                        </div>\r\n                    </Popup>\r\n                ) : null}\r\n            </ReactMapGl>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default MapBox;\r\n\r\n","import React from 'react';\nimport SignIn from './components/sign-in/sign-in.component';\nimport { Link, Switch, Route } from 'react-router-dom';\n// import Particles from 'react-particles-js';\n\nimport MapBox from './components/map-box/mapbox.component';\n\nimport './App.css';\n\n\n// const particleOptions = {\n//   particles: {\n//     number: {\n//       value: 50,\n//       density: {\n//         enable: true,\n//         value_area: 800\n//       }\n//     }\n//   }\n// }\n\nclass App extends React.Component {\n  constructor() {\n    super()\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <Particles params={particleOptions} className='particles' /> */}\n        <Switch>\n          <Route exact path='/' component={SignIn} />\n          <Route exact path='/map' component={MapBox} />\n        </Switch>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { BrowserRouter } from 'react-router-dom'\n\n\n\n\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}